<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2020-04-12T11:57:42+04:30</updated><id>/feed.xml</id><title type="html">Reza Arjmandi</title><subtitle>I'm eager to share my experience with others. So I'll try record new tutorial videos and write blog post about computer programming, Modern C++, Test-Driven-Development and so on.  </subtitle><entry><title type="html">Front-end With React.js, Back-end With C++!</title><link href="/c++20/coroutines/2020/04/11/Front-end_With_React_Back-end_With_CPP.html" rel="alternate" type="text/html" title="Front-end With React.js, Back-end With C++!" /><published>2020-04-11T19:20:47+04:30</published><updated>2020-04-11T19:20:47+04:30</updated><id>/c++20/coroutines/2020/04/11/Front-end_With_React_Back-end_With_CPP</id><content type="html" xml:base="/c++20/coroutines/2020/04/11/Front-end_With_React_Back-end_With_CPP.html">&lt;h2 id=&quot;table-of-content&quot;&gt;Table of content&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#table-of-content&quot;&gt;Table of content&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#calculator-front-end&quot;&gt;calculator Front-end&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-react&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-nodejs&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-npm&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#install-nodejs-and-npm&quot;&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#install-react&quot;&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#create-react-app&quot;&gt;Create React App&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#calculator-back-end&quot;&gt;calculator Back-end&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-restbed&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;restbed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-json-library-for-modern-c&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON library for modern C++&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-cmake&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#install-restbed&quot;&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;restbed&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#install-json-library-for-modern-c&quot;&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON library for modern C++&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#install-a-c-compiler&quot;&gt;Install a C++ compiler&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#install-cmake&quot;&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#create-calculator-web-api-application&quot;&gt;Create calculator web API application&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#build-calculator-back-end&quot;&gt;build calculator Back-end&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this course, I’m going to show you how &lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; can be used in modern web
development. I will implement a simple calculator web application which has
two parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;calculator_front-end&lt;/li&gt;
  &lt;li&gt;calculator_back-end&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the first section I will use &lt;a href=&quot;https://reactjs.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;&lt;/a&gt; to implement
the calculator web interface and in the second section I will use the
&lt;a href=&quot;https://github.com/Corvusoft/restbed&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;restbed&lt;/code&gt;&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; framework to implement
calculator web API.&lt;br /&gt;
Through this course you will be familiar with Single-page applications,
&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; frameworks and &lt;code class=&quot;highlighter-rouge&quot;&gt;REST&lt;/code&gt; API.
Let’s start the front-end section.&lt;/p&gt;

&lt;h2 id=&quot;calculator-front-end&quot;&gt;calculator Front-end&lt;/h2&gt;

&lt;p&gt;I’m going to use &lt;a href=&quot;https://reactjs.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;&lt;/a&gt; to implement the calculator
user interface.&lt;/p&gt;

&lt;h3 id=&quot;what-is-react&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; library for building interactive web user interfaces.
In order to use &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; or any tools based in &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;, you’ll need to know
how to use npm and Node.js.&lt;/p&gt;

&lt;h3 id=&quot;what-is-nodejs&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; is a client-side programming language, which means it’s processed
in the browser. With &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; can also be used outside the
browser.&lt;/p&gt;

&lt;h3 id=&quot;what-is-npm&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; is a tool to download and install &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt; programs, plugins, modules
and so on.&lt;/p&gt;

&lt;h3 id=&quot;install-nodejs-and-npm&quot;&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Read the following article to install and use&lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;.&lt;br /&gt;
&lt;a href=&quot;https://www.taniarascia.com/how-to-install-and-use-node-js-and-npm-mac-and-windows/&quot;&gt;How to Install and Use Node.js and npm (Mac, Windows, Linux)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;install-react&quot;&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Now, to install &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;, run the following command in the terminal:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g create-react-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If successful, you should be able to get version:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm create-react-app --version&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-react-app&quot;&gt;Create React App&lt;/h3&gt;

&lt;p&gt;There are a few ways to use and set up &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;. Fortunately Facebook has
created &lt;code class=&quot;highlighter-rouge&quot;&gt;Create React App&lt;/code&gt;, a tool that brings everything you need to build a
&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; app. It will create a live development server and use &lt;code class=&quot;highlighter-rouge&quot;&gt;Webpack&lt;/code&gt; to
automatically compile &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;JSX&lt;/code&gt;.&lt;br /&gt;
Run the following command in the terminal to create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; app.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;web_api_with_cpp
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;web_api_with_cpp
npx create-react-app calculator_front-end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once that finishes installing, move to the newly created directory and start
the project.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;calculator_front-end
npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you run this command, a new window will popup at &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:3000&lt;/code&gt; with
your new &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; app.
&lt;img src=&quot;/assets/images/image1.png&quot; alt=&quot;start React project&quot; title=&quot;start React project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you look into the project structure, you’ll see a &lt;code class=&quot;highlighter-rouge&quot;&gt;/public&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/src&lt;/code&gt;
directory, along with the regular &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt;,
and &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;/src&lt;/code&gt; directory will contain all &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; codes.
In &lt;code class=&quot;highlighter-rouge&quot;&gt;/public&lt;/code&gt;, our important file is &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;, which has a &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; div html
element.&lt;br /&gt;
In &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; you can create &lt;code class=&quot;highlighter-rouge&quot;&gt;components&lt;/code&gt;, which are like custom, reusable HTML
elements, to quickly and efficiently build user interfaces. React also has two
interesting concepts called &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; which is used to store and
handle data.&lt;br /&gt;
I’m going to design the user interface from bottom to up, I’m going to start
off by designing a simple calculator button component.&lt;br /&gt;
Now, make &lt;code class=&quot;highlighter-rouge&quot;&gt;src/CalculatorButton.js&lt;/code&gt; file and implement &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorButton&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; component:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;import React from 'react';

function CalculatorButton(props) {

    return(
        &amp;lt;input type=&quot;button&quot;/&amp;gt;
    );
}

export default CalculatorButton;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the first line we’ve imported &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;, then we’ve implemented the
&lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorButton&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; component, and finally we’ve exported it in order to
be visible outside.&lt;br /&gt;
We can implement &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; components through classes or simple functions, if a
&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; component is implemented through functions, it must get an argument.
&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; passes &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; of components through this argument.&lt;br /&gt;
In the body function a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; tag is returned. This is &lt;code class=&quot;highlighter-rouge&quot;&gt;JSX&lt;/code&gt;
syntax, &lt;code class=&quot;highlighter-rouge&quot;&gt;JSX&lt;/code&gt; stands for &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;. Through the &lt;code class=&quot;highlighter-rouge&quot;&gt;JSX&lt;/code&gt; feature we
can use and combine &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt; codes together.&lt;br /&gt;
If you want to know how a &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; component can be used, you can modify
&lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt; file as following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;import React from 'react';
import logo from './logo.svg';
import './App.css';
import CalculatorButton from './CalculatorButton'

function App() {
  return (
    &amp;lt;div className=&quot;App&quot;&amp;gt;
      &amp;lt;header className=&quot;App-header&quot;&amp;gt;
        &amp;lt;CalculatorButton /&amp;gt;
      &amp;lt;/header&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve imported the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorButton&lt;/code&gt; component then we’ve replaced the content
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;header&lt;/code&gt; tag with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;CalculatorButton /&amp;gt;&lt;/code&gt; tag. We can use &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;
components like &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; tags.&lt;br /&gt;
Now you can see &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorButton&lt;/code&gt; component is rendered at the center of the
user interface:&lt;br /&gt;
&lt;img src=&quot;/assets/images/image2.png&quot; alt=&quot;CalculatorButton&quot; title=&quot;CalculatorButton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We need to display texts inside &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorButton&lt;/code&gt;, in fact the
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;CalculatorButton /&amp;gt;&lt;/code&gt; tag must get an attribute like &lt;code class=&quot;highlighter-rouge&quot;&gt;caption=&quot;Hello World!&quot;&lt;/code&gt;
and then display the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;caption&lt;/code&gt; attribute inside itself.&lt;br /&gt;
Now set the &lt;code class=&quot;highlighter-rouge&quot;&gt;caption&lt;/code&gt; attribute of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;CalculatorButton /&amp;gt;&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello World!&quot;&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;&amp;lt;CalculatorButton caption=&quot;Hello World!&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; passes these attributes to components as &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorButton&lt;/code&gt;
components must get &lt;code class=&quot;highlighter-rouge&quot;&gt;caption&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; and then display it.&lt;br /&gt;
Now update &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorButton&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;function CalculatorButton(props) {

    return(
        &amp;lt;input 
            type=&quot;button&quot; 
            value={props.caption}/&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve got the &lt;code class=&quot;highlighter-rouge&quot;&gt;caption&lt;/code&gt; attribute through &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; data structure and then set
it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; attribute of &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; tag.&lt;br /&gt;
Now you can see, the &lt;code class=&quot;highlighter-rouge&quot;&gt;caption&lt;/code&gt; attribute of &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorButton&lt;/code&gt; is rendered:&lt;br /&gt;
&lt;img src=&quot;/assets/images/image3.png&quot; alt=&quot;CalculatorButton&quot; title=&quot;CalculatorButton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, It turns to designing all calculator buttons. Create
&lt;code class=&quot;highlighter-rouge&quot;&gt;src/CalculatorPanel.js&lt;/code&gt; file, implement ‍‍new &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;
component as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;import React from 'react'
import CalculatorButton from './CalculatorButton'

function CalculatorPanel(props) {
  
  const captions = [
      &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;/&quot;,
      &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;*&quot;,
      &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;-&quot;,
      &quot;0&quot;, &quot;.&quot;, &quot;C&quot;, &quot;+&quot;,
      &quot;=&quot;,
    ];
  
  const calc_buttons = captions.map((value, index) =&amp;gt; {
    return &amp;lt;CalculatorButton caption={value} /&amp;gt;
  });

  return(
    &amp;lt;div&amp;gt;
      {calc_buttons}
    &amp;lt;/div&amp;gt;
  );

}

export default CalculatorPanel;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve declared &lt;code class=&quot;highlighter-rouge&quot;&gt;captions&lt;/code&gt; array which contains all calculator buttons captions,
Then an array of &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;CalculatorButton /&amp;gt;&lt;/code&gt;s is created through the &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; function,
and finally its returned inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div&amp;gt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; tag.&lt;br /&gt;
Now, update &lt;code class=&quot;highlighter-rouge&quot;&gt;src/App.js&lt;/code&gt; to render new &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt; component:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;import CalculatorPanel from './CalculatorPanel'

function App() {
  return (
    &amp;lt;div className=&quot;App&quot;&amp;gt;
      &amp;lt;header className=&quot;App-header&quot;&amp;gt;
        &amp;lt;CalculatorPanel /&amp;gt;
      &amp;lt;/header&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can see &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt; is rendered:&lt;br /&gt;
&lt;img src=&quot;//assets/images/image4.png&quot; alt=&quot;CalculatorPanel&quot; title=&quot;CalculatorPanel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We must arrange calculator buttons in a way that it looks similar a calculator,
Now declare new styles in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/index.css&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.calculator-grid-container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;grid-gap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.calculator-equal-button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;grid-column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ve declared &lt;code class=&quot;highlighter-rouge&quot;&gt;.calculator-grid-container&lt;/code&gt; in order to arrange calculator
buttons in a 4x4 grid, and also &lt;code class=&quot;highlighter-rouge&quot;&gt;.calculator-equal-button&lt;/code&gt; is declared to style
&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; button in a way which its width equal to the calculator width.&lt;br /&gt;
Now update &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt; component to use these styles:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;function CalculatorPanel(props) {
  
  const captions = [
      &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;/&quot;,
      &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;*&quot;,
      &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;-&quot;,
      &quot;0&quot;, &quot;.&quot;, &quot;C&quot;, &quot;+&quot;,
      &quot;=&quot;,
    ];
  
  const calc_buttons = captions.map((value, index) =&amp;gt; {
    return &amp;lt;CalculatorButton caption={value} /&amp;gt;
  });

  return(
    &amp;lt;div className=&quot;calculator-grid-container&quot;&amp;gt;
      {calc_buttons}
    &amp;lt;/div&amp;gt;
  );

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve set &lt;code class=&quot;highlighter-rouge&quot;&gt;className&lt;/code&gt; attribute of &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; html tag element to
&lt;code class=&quot;highlighter-rouge&quot;&gt;calculator-grid-container&lt;/code&gt;, In &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; we must use &lt;code class=&quot;highlighter-rouge&quot;&gt;className&lt;/code&gt; instead of
&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; attribute in &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; tags, because &lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt; is a reserved word in
&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;.&lt;br /&gt;
Now update the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorButton&lt;/code&gt; component to use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;calculator-equal-button&lt;/code&gt; style:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;function CalculatorButton(props) {

    return(
        &amp;lt;input 
            type=&quot;button&quot; 
            value={props.caption}
            className={props.caption === &quot;=&quot; ? &quot;calculator-equal-button&quot; : null}/&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve set the &lt;code class=&quot;highlighter-rouge&quot;&gt;className&lt;/code&gt; attribute to the &lt;code class=&quot;highlighter-rouge&quot;&gt;calculator-equal-button&lt;/code&gt;, if
&lt;code class=&quot;highlighter-rouge&quot;&gt;props.caption&lt;/code&gt; equal to the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;. This feature of React is called conditional
rendering, through this feature we can use conditions in conjunction with
&lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; tags.&lt;br /&gt;
Now you can see arranged calculator buttons in a grid is rendered:&lt;br /&gt;
&lt;img src=&quot;/assets/images/image5.png&quot; alt=&quot;CalculatorGrid&quot; title=&quot;CalculatorGrid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our calculator needs a display. Let’s create &lt;code class=&quot;highlighter-rouge&quot;&gt;src/CalculatorDisplay.js&lt;/code&gt; file
and implement &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt; component as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;import React from 'react'

function CalculatorDisplay(props) {
    return(
        &amp;lt;input 
            readOnly={true} 
            value={props.text} 
            /&amp;gt;
    );
}

export default CalculatorDisplay;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve implemented the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt; component by an &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; tag.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;readOnly&lt;/code&gt; attribute has been set to &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; because the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt;
value must change only by &lt;code class=&quot;highlighter-rouge&quot;&gt;{props.text}&lt;/code&gt; attribute, and the user must not be
able to change the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt;.&lt;br /&gt;
Now we must add the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt; component at the top of
&lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;//...
import CalculatorDisplay from './CalculatorDisplay'

function CalculatorPanel(props) {
  //...

  return(
    &amp;lt;div className=&quot;calculator-grid-container&quot;&amp;gt;
      &amp;lt;CalculatorDisplay /&amp;gt;
      {calc_buttons}
    &amp;lt;/div&amp;gt;
  );

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can see the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt; component is rendered as follows:&lt;br /&gt;
&lt;img src=&quot;/assets/images/image6.png&quot; alt=&quot;CalculatorDisplay&quot; title=&quot;CalculatorDisplay&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Calculator buttons are disordered. We must declare a new style for
&lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt; in order to place it at top of the calculator and also
it’s width equal to the calculator width.&lt;br /&gt;
Now add the following code at the end of the &lt;code class=&quot;highlighter-rouge&quot;&gt;index.css&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.calculator-display&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;grid-column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ve declared &lt;code class=&quot;highlighter-rouge&quot;&gt;.calculator-display&lt;/code&gt; to style &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt;, Now update
&lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt; component as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;function CalculatorDisplay(props) {
    return(
        &amp;lt;input 
            readOnly={true} 
            value={props.text}
            className=&quot;calculator-display&quot; 
            /&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve set the &lt;code class=&quot;highlighter-rouge&quot;&gt;className&lt;/code&gt; attribute of &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; tag to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;calculator-display&lt;/code&gt; and you can see its result as follows:&lt;br /&gt;
&lt;img src=&quot;/assets/images/image7.png&quot; alt=&quot;CalculatorDisplay&quot; title=&quot;CalculatorDisplay&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you click on each button, nothing happens. We must implement the behavior of
calculator buttons. We’re going to implement these behaviors in a new &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;
component.&lt;br /&gt;
Now create &lt;code class=&quot;highlighter-rouge&quot;&gt;src/Calculator.js&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;import React from 'react'
import CalculatorPanel from './CalculatorPanel'

class Calculator extends React.Component {

  operationHandler(operation){
  }

  numberHandler(number) {
  }

  dotHandler() {
  }

  clearHandler() {
  }

  equalHandler() {
  }

  render() {
    return (
        &amp;lt;div className=&quot;calculator-grid-container&quot;&amp;gt;
          &amp;lt;CalculatorPanel 
            numberClicked={this.numberHandler.bind(this)}
            operationClicked={this.operationHandler.bind(this)}
            dotClicked={this.dotHandler.bind(this)}
            equalClicked={this.equalHandler.bind(this)}
            clearClicked={this.clearHandler.bind(this)}
            /&amp;gt;
        &amp;lt;/div&amp;gt;
      );
  }
}

export default Calculator;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve implemented calculator buttons handlers in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calculator&lt;/code&gt; component.
In the &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; function, we’ve added a &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt; component and passed
handler functions through the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt; attributes.&lt;br /&gt;
I should mention that &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; components didn’t bind &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; object to its
functions. As you can see, we must bind &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; object to function handlers
explicitly.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt; component must get function handlers of buttons and calls
these handlers when buttons are clicked.&lt;br /&gt;
Now update &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt; component as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;function CalculatorPanel(props) {
  
  const buttons = [
    {text: &quot;7&quot;, handler: () =&amp;gt; props.numberClicked(&quot;7&quot;)}, 
    {text: &quot;8&quot;, handler: () =&amp;gt; props.numberClicked(&quot;8&quot;)}, 
    {text: &quot;9&quot;, handler: () =&amp;gt; props.numberClicked(&quot;9&quot;)}, 
    {text: &quot;/&quot;, handler: () =&amp;gt; props.operationClicked(&quot;divide&quot;)}, 
    {text: &quot;4&quot;, handler: () =&amp;gt; props.numberClicked(&quot;4&quot;)}, 
    {text: &quot;5&quot;, handler: () =&amp;gt; props.numberClicked(&quot;5&quot;)},
    {text: &quot;6&quot;, handler: () =&amp;gt; props.numberClicked(&quot;6&quot;)},
    {text: &quot;*&quot;, handler: () =&amp;gt; props.operationClicked(&quot;multiply&quot;)}, 
    {text: &quot;1&quot;, handler: () =&amp;gt; props.numberClicked(&quot;1&quot;)},
    {text: &quot;2&quot;, handler: () =&amp;gt; props.numberClicked(&quot;2&quot;)},
    {text: &quot;3&quot;, handler: () =&amp;gt; props.numberClicked(&quot;3&quot;)},
    {text: &quot;-&quot;, handler: () =&amp;gt; props.operationClicked(&quot;subtract&quot;)},
    {text: &quot;0&quot;, handler: () =&amp;gt; props.numberClicked(&quot;0&quot;)},
    {text: &quot;.&quot;, handler: () =&amp;gt; props.dotClicked()},
    {text: &quot;C&quot;, handler: () =&amp;gt; props.clearClicked()},
    {text: &quot;+&quot;, handler: () =&amp;gt; props.operationClicked(&quot;add&quot;)},
    {text: &quot;=&quot;, handler: () =&amp;gt; props.equalClicked()},
  ];
  
  const calc_buttons = buttons.map((value, index) =&amp;gt; {
    return &amp;lt;CalculatorButton 
      caption={value.text} 
      onClick={value.handler} /&amp;gt;
  });

  return(
    &amp;lt;div className=&quot;calculator-grid-container&quot;&amp;gt;
    &amp;lt;CalculatorDisplay /&amp;gt;
      {calc_buttons}
    &amp;lt;/div&amp;gt;
  );

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve changed captions array to buttons array, and every item of this array
specified &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt; of buttons. Each handler is an arrow function
which calls the buttons handler with proper arguments. Buttons handlers are
passed through &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; data structure.&lt;br /&gt;
We’ve updated the &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; function, and the handler of the button is passed to
the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorButton&lt;/code&gt; component through the &lt;code class=&quot;highlighter-rouge&quot;&gt;onClick&lt;/code&gt; attribute.
&lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorButton&lt;/code&gt; component must get the handler and call it when the button
is clicked.&lt;br /&gt;
Now update the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorButton&lt;/code&gt; component as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;function CalculatorButton(props) {

    return(
        &amp;lt;input 
            type=&quot;button&quot; 
            value={props.caption}
            className={props.caption === &quot;=&quot; ? &quot;calculator-equal-button&quot; : null}
            onClick={props.onClick}
            /&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve bound the &lt;code class=&quot;highlighter-rouge&quot;&gt;props.onClick&lt;/code&gt; handler to the &lt;code class=&quot;highlighter-rouge&quot;&gt;onClick&lt;/code&gt; event of &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; tag, and it causes every time the button is clicked, &lt;code class=&quot;highlighter-rouge&quot;&gt;props.onClick&lt;/code&gt; is
called.&lt;br /&gt;
The &lt;code class=&quot;highlighter-rouge&quot;&gt;Calculator&lt;/code&gt; component must display proper values in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt; component when it’s handlers are called.
Now update &lt;code class=&quot;highlighter-rouge&quot;&gt;Calculator&lt;/code&gt; component as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;class Calculator extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      result: &quot;&quot;,
    };
  }

  render() {
    return (
        &amp;lt;div className=&quot;calculator-grid-container&quot;&amp;gt;
          &amp;lt;CalculatorPanel 
            result={this.state.result} 
            numberClicked={this.numberHandler.bind(this)}
            operationClicked={this.operationHandler.bind(this)}
            dotClicked={this.dotHandler.bind(this)}
            equalClicked={this.equalHandler.bind(this)}
            clearClicked={this.clearHandler.bind(this)}
            /&amp;gt;
        &amp;lt;/div&amp;gt;
      );
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve implemented the &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; function of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calculator&lt;/code&gt; component in
order to initialize the &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; object. &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; is a special object in &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;
components.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;, but it is private and fully controlled by the
component. &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; objects can contain several independent variables.&lt;br /&gt;
In the &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; function we have set the &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; attribute of
&lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt; component to the &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; variable of &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; object.&lt;br /&gt;
Every time the state is updated, &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt; renders the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt;
component in order to display new results.&lt;br /&gt;
Now update &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt; component in a way that it gets the &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;
attribute and updates the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt; component:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;function CalculatorPanel(props) {
  //...
  
  return(
    &amp;lt;div className=&quot;calculator-grid-container&quot;&amp;gt;
    &amp;lt;CalculatorDisplay text={props.result} /&amp;gt;
      {calc_buttons}
    &amp;lt;/div&amp;gt;
  );

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve set the &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt; attribute of the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt; component to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;props.result&lt;/code&gt;, and it causes the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorDisplay&lt;/code&gt; component to be updated
when &lt;code class=&quot;highlighter-rouge&quot;&gt;props.result&lt;/code&gt; is changed.&lt;br /&gt;
We’re going complete the implementation of function handlers in &lt;code class=&quot;highlighter-rouge&quot;&gt;Calculator&lt;/code&gt;
component, We’re going to start by &lt;code class=&quot;highlighter-rouge&quot;&gt;numberHandler&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;class Calculator extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      result: &quot;&quot;,
      numbers: [&quot;&quot;, &quot;&quot;],
      numberIdx: 0,
    };
  }

  numberHandler(number) {
    const newNumber = this.state.numbers[this.state.numberIdx] + number;
    this.updateNumber(newNumber);
  }

  updateNumber(newNumber) {
    var newNumbers = this.state.numbers;
    newNumbers[this.state.numberIdx] = newNumber;
    this.setState({
      result: newNumbers[this.state.numberIdx],
      numbers: newNumbers,
    });
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve added new variables to &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; object, &lt;code class=&quot;highlighter-rouge&quot;&gt;numbers&lt;/code&gt; array which has two
empty strings, &lt;code class=&quot;highlighter-rouge&quot;&gt;numberIdx&lt;/code&gt; variable which is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;. All operations of this
calculator are binary operations, which means operations need two numbers.
We’re going to store these two numbers in &lt;code class=&quot;highlighter-rouge&quot;&gt;numbers&lt;/code&gt; array. The &lt;code class=&quot;highlighter-rouge&quot;&gt;numberIdx&lt;/code&gt;
specifies which number the user has entered, first number or second number.&lt;br /&gt;
The &lt;code class=&quot;highlighter-rouge&quot;&gt;numberHandler&lt;/code&gt; is called when the user clicks on each number button, and
number is passed to the handler through the &lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; argument. In this function
we’ve updated the &lt;code class=&quot;highlighter-rouge&quot;&gt;numbers&lt;/code&gt; array in &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; object.&lt;br /&gt;
Bear in mind, we must update &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; objects only through the &lt;code class=&quot;highlighter-rouge&quot;&gt;setState&lt;/code&gt;
function.&lt;br /&gt;
Now we’re going to complete the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;dotHandler&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;dotHandler() {
    const newNumber = this.state.numbers[this.state.numberIdx] + &quot;.&quot;;
    if(isNaN(newNumber)) {
      return
    } 
    this.updateNumber(newNumber);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function adds &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; to the numbers in order to cast them to the float
numbers. And finally updates the &lt;code class=&quot;highlighter-rouge&quot;&gt;numbers&lt;/code&gt; array in &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; object through
&lt;code class=&quot;highlighter-rouge&quot;&gt;updateNumber&lt;/code&gt; function which is implemented in the previous step.&lt;br /&gt;
Now it turns to &lt;code class=&quot;highlighter-rouge&quot;&gt;operationHandler&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;
class Calculator extends React.Component {

  constructor(props) {
    super(props);
    this.state = {
      result: &quot;&quot;,
      numbers: [&quot;&quot;, &quot;&quot;],
      numberIdx: 0,
      operation: &quot;&quot;,
    };
  }

  operationHandler(operation){
    if(this.state.numberIdx === 1) {
      this.equalHandler();
      return;
    }

    if( (operation === &quot;subtract&quot; || operation === &quot;add&quot;) &amp;amp;&amp;amp;
          this.state.numbers[this.state.numberIdx] === &quot;&quot;) {
      this.numberHandler(operation === &quot;subtract&quot; ? &quot;-&quot; : &quot;+&quot;);
      return;
    }

    this.setOperation(operation);
  }

  setOperation(operation){
    this.setState({operation: operation});
    this.nextNumber();
  }

  nextNumber() {
    const newIdx = this.state.numberIdx === 0 ? 1 : 0;
    this.setState({
      result: this.state.numbers[newIdx],
      numberIdx: newIdx,
    });
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve added a new &lt;code class=&quot;highlighter-rouge&quot;&gt;operation&lt;/code&gt; variable to the &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; object in order to store
operations which user clicked.&lt;br /&gt;
The &lt;code class=&quot;highlighter-rouge&quot;&gt;operationHandler&lt;/code&gt; is called when of of these operations &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; is clicked. We’ve updated the &lt;code class=&quot;highlighter-rouge&quot;&gt;numberIdx&lt;/code&gt; and  &lt;code class=&quot;highlighter-rouge&quot;&gt;operation&lt;/code&gt; variable.&lt;br /&gt;
Also when users click on &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; buttons which didn’t enter any numbers
before, then we add a &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; in front of the number. And if a user
enters two numbers and then clicks on one of the operation buttons then we call
the &lt;code class=&quot;highlighter-rouge&quot;&gt;equalHandler&lt;/code&gt; function, which it equals to click on &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; button.&lt;br /&gt;
Now implement &lt;code class=&quot;highlighter-rouge&quot;&gt;equalHandler&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;setResult(result){
  const newNumbers = [result, &quot;&quot;];
  const newNumberIdx = 0;
  this.setState({
    result: newNumbers[newNumberIdx],
    numbers: newNumbers,
    numberIdx: newNumberIdx,
    operation: &quot;&quot;,
  });
}

equalHandler() {
  if(this.state.numbers[0] === &quot;&quot; || this.state.numbers[1] === &quot;&quot;) {
    return
  }
  this.props.calculatorApi.calculate(
    this.state.numbers[0], 
    this.state.numbers[1], 
    this.state.operation, 
    (result)=&amp;gt; {
      this.setResult(result);
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve supposed that an object is passed through &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; object called
&lt;code class=&quot;highlighter-rouge&quot;&gt;calculatorApi&lt;/code&gt;. Through this object we can call the calculator API. This
object has a function called &lt;code class=&quot;highlighter-rouge&quot;&gt;calculate&lt;/code&gt; which gets the first number, second
number, operation and a handler as arguments.&lt;br /&gt;
We’ve called this function in order to send numbers and operation to the
Back-end API, when the result is gotten ready, the handler is called and the
result is passed through the handler argument.&lt;br /&gt;
Finally we’re going to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;clearHandler&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;clearHandler() {
  this.setState({
    result: &quot;&quot;,
    numbers: [&quot;&quot;, &quot;&quot;],
    numberIdx: 0,
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;clearHandler&lt;/code&gt; sets the &lt;code class=&quot;highlighter-rouge&quot;&gt;state&lt;/code&gt; object to initial state.&lt;br /&gt;
Now we must implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorApi&lt;/code&gt; component. create
&lt;code class=&quot;highlighter-rouge&quot;&gt;src/CalculatorApi.js&lt;/code&gt; class as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;class CalculatorApi {

    calculate(number1, number2, operation, handler) {

    }

}

export default CalculatorApi;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorApi&lt;/code&gt; is a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; class, it’s not a &lt;code class=&quot;highlighter-rouge&quot;&gt;React&lt;/code&gt;
component. As we need, &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorApi&lt;/code&gt; has a &lt;code class=&quot;highlighter-rouge&quot;&gt;calculate&lt;/code&gt; function which gets
two numbers, an operation and a handler.&lt;br /&gt;
Now implement &lt;code class=&quot;highlighter-rouge&quot;&gt;calculate&lt;/code&gt; function as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;class CalculatorApi {

    constructor(serviceAddress) {
        this.serviceAddress = serviceAddress;
    }

    makeURL(number1, number2, operation) {
        const resource = operation + &quot;/&quot; + number1 + &quot;/&quot; + number2;
        return new URL(resource, this.serviceAddress);
    }

    calculate(number1, number2, operation, handler) {
        fetch(this.makeURL(number1, number2, operation))
        .then(res =&amp;gt; res.json())
        .then((response)=&amp;gt; {
            handler(response[&quot;result&quot;]);
          },
          (err)=&amp;gt; {
            handler(err);
            console.log(err);
          }
        );
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;calculate&lt;/code&gt; function uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; API in order to communicate
with the calculator API. &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorApi&lt;/code&gt; also gets calculator API address
thorough its &lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt; function.&lt;br /&gt;
We must create an object from &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorApi&lt;/code&gt; and pass it to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;Calculator&lt;/code&gt; class. Now update &lt;code class=&quot;highlighter-rouge&quot;&gt;App.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;import Calculator from './Calculator'
import CalculatorApi from './CalculatorApi'

function App() {
  return (
    &amp;lt;div className=&quot;App&quot;&amp;gt;
      &amp;lt;header className=&quot;App-header&quot;&amp;gt;
        &amp;lt;Calculator calculatorApi={new CalculatorApi('http://127.0.0.1:8080')} /&amp;gt;
      &amp;lt;/header&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve changed the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorPanel&lt;/code&gt; component to &lt;code class=&quot;highlighter-rouge&quot;&gt;Calculator&lt;/code&gt; component. And
also we’ve created an object from the &lt;code class=&quot;highlighter-rouge&quot;&gt;CalculatorApi&lt;/code&gt; component and passed it
to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Calculator&lt;/code&gt; component through the &lt;code class=&quot;highlighter-rouge&quot;&gt;calculatorApi&lt;/code&gt; attribute.&lt;br /&gt;
Congratulations!&lt;br /&gt;
You’ve completed the calculator front-end section. Now Let’s dive into the
calculator back-end section.&lt;/p&gt;

&lt;h2 id=&quot;calculator-back-end&quot;&gt;calculator Back-end&lt;/h2&gt;

&lt;p&gt;We’re going to use &lt;code class=&quot;highlighter-rouge&quot;&gt;restbed&lt;/code&gt; C++ framework to implement calculator web API.&lt;/p&gt;

&lt;h3 id=&quot;what-is-restbed&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;restbed&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;restbed&lt;/code&gt; is a C++11 framework which enables us to implement RESTful web
APIs.&lt;br /&gt;
We’re going to implement calculator web API in the form of a JSON web API. So
we need a C++ JSON Library. There are a lot of JSON libraries, We’ve selected
&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON library for modern C++&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;what-is-json-library-for-modern-c&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON library for modern C++&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;It’s a single header JSON library for C++ programming language. You’ll see It
has an intuitive syntax.&lt;br /&gt;
Also we need a cross platform build system which enables us to build calculator
web API. We’re going to use cmake as a build system.&lt;/p&gt;

&lt;h3 id=&quot;what-is-cmake&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt; is a cross-platform, open-source build system. &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt; is used to build
test and package &lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; software on many platforms like &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;mac&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;install-restbed&quot;&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;restbed&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;If you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt; machine, you can run the following command in the
terminal to install &lt;code class=&quot;highlighter-rouge&quot;&gt;restbed&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;librestbed-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Otherwise you can build and install it through &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;, read &lt;code class=&quot;highlighter-rouge&quot;&gt;restbed&lt;/code&gt;
&lt;a href=&quot;https://github.com/Corvusoft/restbed&quot;&gt;documentation for details&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;install-json-library-for-modern-c&quot;&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON library for modern C++&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON library for modern C++&lt;/code&gt; is a single header library. Download it’s header
file through &lt;a href=&quot;https://github.com/nlohmann/json&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;install-a-c-compiler&quot;&gt;Install a C++ compiler&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; codes need to compile. So we need a &lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; compiler.&lt;br /&gt;
If you have a linux machine, you might have &lt;code class=&quot;highlighter-rouge&quot;&gt;GCC&lt;/code&gt;.  Also you can install
&lt;code class=&quot;highlighter-rouge&quot;&gt;Visual C++&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;clang&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;mac os&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;install-cmake&quot;&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;If you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux&lt;/code&gt; machine, you can run the following command in the
terminal to install &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install cmake&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Otherwise you can install it through &lt;a href=&quot;https://cmake.org/download/&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;create-calculator-web-api-application&quot;&gt;Create calculator web API application&lt;/h3&gt;

&lt;p&gt;Create new directory in the &lt;code class=&quot;highlighter-rouge&quot;&gt;web_api_with_cpp&lt;/code&gt; directory called
&lt;code class=&quot;highlighter-rouge&quot;&gt;calculator_back-end&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;calculator_back-end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The fundamental concept in any RESTful API is the resource. A resource is an
object with a type, associated data, relationships to other resources, and a
set of methods that operate on it. It is similar to an object instance in an
object-oriented programming language, with the important difference that only a
few standard methods are defined for the resource (corresponding to the
standard HTTP GET, POST, PUT and DELETE methods), while an object instance
typically has many methods. We can consider the calculator API as a resource.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;restbed&lt;/code&gt; framework has a class called &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; class helps us to
implement resources in our RESTful API. For each resource we must declare an
object from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; class, and then implement methods of resource which
we need, and then bind these methods to the resource object. We’re going to do
this stuff through a class. First, let’s implement an interface for this class.&lt;br /&gt;
Create &lt;code class=&quot;highlighter-rouge&quot;&gt;calculator_back-end/include&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;calculator_back-end
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;include
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now create new &lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; header file in &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; directory called
&lt;code class=&quot;highlighter-rouge&quot;&gt;IResourceFactory.h&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#pragma once

#include &amp;lt;memory&amp;gt;
#include &amp;lt;restbed&amp;gt;

using namespace std;
using namespace restbed;

class IResourceFactory {

public:

    virtual shared_ptr&amp;lt;Resource&amp;gt; get_resource() const = 0;

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve created an &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; directory in order to place all &lt;code class=&quot;highlighter-rouge&quot;&gt;C++&lt;/code&gt; header files
inside it. Then we’ve implemented a class called &lt;code class=&quot;highlighter-rouge&quot;&gt;IResourceFactory&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;I&lt;/code&gt;
letter in front of its name stands for interface, which means
&lt;code class=&quot;highlighter-rouge&quot;&gt;IResourceFactory&lt;/code&gt; is an interface class and all it’s functions are abstract
functions. Every resource factory class must implement this interface.
This interface has an abstract function called &lt;code class=&quot;highlighter-rouge&quot;&gt;get_resource&lt;/code&gt;. Every resource
factory concrete class must prepare resource and finally deliver to the its
customer through &lt;code class=&quot;highlighter-rouge&quot;&gt;get_resource&lt;/code&gt; function, in more details means concrete
classes must create an object from &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; class and then implement all
functions which it needs then bind functions to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; object and
finally return &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; object in the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_resource&lt;/code&gt; function.&lt;br /&gt;
Now Let’s create a &lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory&lt;/code&gt; class. Create
&lt;code class=&quot;highlighter-rouge&quot;&gt;include/CalcResourceFactory.h&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#pragma once

#include &quot;IResourceFactory.h&quot;

class CalcResourceFactory : public IResourceFactory {

public:

  CalcResourceFactory();
  shared_ptr&amp;lt;Resource&amp;gt; get_resource() const final;

private:

  shared_ptr&amp;lt;Resource&amp;gt; _resource;

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve declared new a class which implements &lt;code class=&quot;highlighter-rouge&quot;&gt;IResourceFactory&lt;/code&gt; interface called
&lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory&lt;/code&gt;, this class has a constructor function and also a member
object called &lt;code class=&quot;highlighter-rouge&quot;&gt;_resource&lt;/code&gt;. Its member object is a &lt;code class=&quot;highlighter-rouge&quot;&gt;shared_pointer&lt;/code&gt; from
&lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; class. We’ve said every resource factory must prepare an object from
the &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; class and then deliver it through the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_resource&lt;/code&gt; function.&lt;br /&gt;
Now, Let’s implement it’s constructor. Create new &lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory.cpp&lt;/code&gt;
source file (Note: create source files inside calculator_back-end directory) as
follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#include &quot;CalcResourceFactory.h&quot;

CalcResourceFactory::CalcResourceFactory() {
  _resource = make_shared&amp;lt;Resource&amp;gt;();
  _resource-&amp;gt;set_path(
      &quot;/{operation: add|subtract|multiply|divide}&quot;
      &quot;/{num1: [-+]?[0-9]*\\.?[0-9]*}&quot;
      &quot;/{num2: [-+]?[0-9]*\\.?[0-9]*}&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve initialized &lt;code class=&quot;highlighter-rouge&quot;&gt;_resource&lt;/code&gt; object to a newly allocated &lt;code class=&quot;highlighter-rouge&quot;&gt;shared_pointer&lt;/code&gt;
from &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; class. Every resource in RESTful APIs must associate with an
url. We’ve associated an url to &lt;code class=&quot;highlighter-rouge&quot;&gt;_resource&lt;/code&gt; object through &lt;code class=&quot;highlighter-rouge&quot;&gt;set_path&lt;/code&gt; function.&lt;br /&gt;
This url has three parts, we’ve labeled each part with following labels:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;operation&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;num1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;num2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’ll see we can read each part of the path through these labels.&lt;br /&gt;
We can reach to the resource through an url like this:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;/add/2/3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We’ve used regular expression syntax in order to filter each part of the url.
&lt;code class=&quot;highlighter-rouge&quot;&gt;operation&lt;/code&gt; part must accept only &lt;code class=&quot;highlighter-rouge&quot;&gt;add&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;subtract&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;multiply&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;divide&lt;/code&gt;
parameters which specify the calculator functionality. &lt;code class=&quot;highlighter-rouge&quot;&gt;num1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;num2&lt;/code&gt; parts
must accept only float or integral numbers which specify calculator
functionality operands.&lt;br /&gt;
Every &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; object must have a handler which is called when resource is
requested by a client.&lt;br /&gt;
We can set method handler of &lt;code class=&quot;highlighter-rouge&quot;&gt;Resource&lt;/code&gt; object through &lt;code class=&quot;highlighter-rouge&quot;&gt;set_method_handler&lt;/code&gt;
function:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory.h&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;class CalcResourceFactory : public IResourceFactory {

  // ...

private:

  void get_handler(const shared_ptr&amp;lt;Session&amp;gt; session);

  //...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory.cpp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;CalcResourceFactory::CalcResourceFactory() {
  //...

  _resource-&amp;gt;set_method_handler(&quot;GET&quot;,
        [&amp;amp;](const auto session) {
            get_handler(session);
        });
}

void CalcResourceFactory::get_handler(const shared_ptr&amp;lt;Session&amp;gt; session) {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve set &lt;code class=&quot;highlighter-rouge&quot;&gt;get_handler&lt;/code&gt; function to &lt;code class=&quot;highlighter-rouge&quot;&gt;_resource&lt;/code&gt; object as a method handler.
&lt;code class=&quot;highlighter-rouge&quot;&gt;set_method_handler&lt;/code&gt; gets two arguments, first argument specifies &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; method
and second argument specifies function handler. Every time &lt;code class=&quot;highlighter-rouge&quot;&gt;_resource&lt;/code&gt; is
requested &lt;code class=&quot;highlighter-rouge&quot;&gt;get_handler&lt;/code&gt; is called and an object is passed to the handler called
&lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt;. Through the &lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt; object we can get any information about
requests and send results to the client.&lt;br /&gt;
Now, Let’s implement &lt;code class=&quot;highlighter-rouge&quot;&gt;get_handler&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory.h&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;//...

#include &amp;lt;string&amp;gt;
#include &amp;lt;tuple&amp;gt;

class CalcResourceFactory : public IResourceFactory {

  //...

private:

  tuple&amp;lt;float, float, string&amp;gt;
    get_path_parameters(const shared_ptr&amp;lt;Session&amp;gt; session) const;

  //...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory.cpp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;tuple&amp;lt;float, float, string&amp;gt; CalcResourceFactory::get_path_parameters(
        const shared_ptr&amp;lt;Session&amp;gt; session) const {
    const auto&amp;amp; request = session-&amp;gt;get_request();
    const auto operation = request-&amp;gt;get_path_parameter(&quot;operation&quot;);
    auto num1 = atof(request-&amp;gt;get_path_parameter(&quot;num1&quot;).c_str());
    auto num2 = atof(request-&amp;gt;get_path_parameter(&quot;num2&quot;).c_str());
    return make_tuple(num1, num2, operation);
}

void CalcResourceFactory::get_handler(const shared_ptr&amp;lt;Session&amp;gt; session) {
  const auto [num1, num2, operation] = get_path_parameters(session);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve implemented a new function called &lt;code class=&quot;highlighter-rouge&quot;&gt;get_path_parameters&lt;/code&gt; to get the values
of labels in the url which is requested.
In the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_path_parameters&lt;/code&gt; we’ve got the &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; object from the &lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt;
object through the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_request&lt;/code&gt; function. Then we’ve got the &lt;code class=&quot;highlighter-rouge&quot;&gt;operation&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;num1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;num2&lt;/code&gt; values of the url through the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_path_parameter&lt;/code&gt; function.
Then we’ve converted the &lt;code class=&quot;highlighter-rouge&quot;&gt;num1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;num2&lt;/code&gt; values to float numbers. Finally
we’ve returned the values through a tuple object.&lt;br /&gt;
In the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_handler&lt;/code&gt; function we’ve called the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_path_parameters&lt;/code&gt; function
and passed the &lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt; object as an argument. Then we’ve set the &lt;code class=&quot;highlighter-rouge&quot;&gt;num1&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;num2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;operation&lt;/code&gt; variable to the values of the &lt;code class=&quot;highlighter-rouge&quot;&gt;tuple&lt;/code&gt; object which is
returned. Did you see this feature before??
It’s amazing. This feature is called &lt;code class=&quot;highlighter-rouge&quot;&gt;structured binding&lt;/code&gt; which was added in
C++17 standard.&lt;br /&gt;
Now we must prepare the result of calculation:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory.h&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;//...
class CalcResourceFactory : public IResourceFactory {
  //...
private:

  float calculate(float num1, float num2, string operation);
  //...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory.cpp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;float CalcResourceFactory::calculate(float num1, float num2, string operation) {
  if(operation == &quot;add&quot;) {
      return num1 + num2;
  }
  else if(operation == &quot;subtract&quot;) {
      return num1 - num2;
  }
  else if(operation == &quot;multiply&quot;) {
      return num1 * num2;
  }
  else if(operation == &quot;divide&quot;) {
      return num1 / num2;
  }
}

void CalcResourceFactory::get_handler(const shared_ptr&amp;lt;Session&amp;gt; session) {
    const auto [num1, num2, operation] = get_path_parameters(session);
    auto result = calculate(num1, num2, operation);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve implemented a new function called &lt;code class=&quot;highlighter-rouge&quot;&gt;calculate&lt;/code&gt; to calculate the result.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;calculate&lt;/code&gt; function gets &lt;code class=&quot;highlighter-rouge&quot;&gt;num1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;num2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;operation&lt;/code&gt; as arguments.&lt;br /&gt;
In the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_handler&lt;/code&gt; function, we’ve called the &lt;code class=&quot;highlighter-rouge&quot;&gt;calculate&lt;/code&gt; function and set
the &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; variable to returned value.&lt;br /&gt;
Now we must create a &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; data structure and put the result inside it in
order to send to the user.&lt;br /&gt;
First copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;json.hpp&lt;/code&gt; library into &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; directory which you’ve
downloaded in the previous steps.
Then use &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; library to create &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; data structure:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory.h&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;//...
class CalcResourceFactory : public IResourceFactory {
  //...
private:

  string to_json(float result);
  //...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory.cpp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#include &amp;lt;sstream&amp;gt;
#include &amp;lt;iomanip&amp;gt;
#include &quot;json.hpp&quot;

using namespace nlohmann;

string CalcResourceFactory::to_json(float result) {
  ostringstream str_stream;
  str_stream &amp;lt;&amp;lt; result;
  json jsonResult = {
      {&quot;result&quot;, str_stream.str()}
  };
  return jsonResult.dump();
}

void CalcResourceFactory::get_handler(const shared_ptr&amp;lt;Session&amp;gt; session) {
  const auto [num1, num2, operation] = get_path_parameters(session);
  auto result = calculate(num1, num2, operation);
  auto content = to_json(result);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At first we’ve included &lt;code class=&quot;highlighter-rouge&quot;&gt;sstream&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;iomanip&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;json.hpp&lt;/code&gt; header files.
We’ve implemented a new function called &lt;code class=&quot;highlighter-rouge&quot;&gt;to_json&lt;/code&gt; to get the result of
calculation and put it inside a &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; data structure. In the &lt;code class=&quot;highlighter-rouge&quot;&gt;to_json&lt;/code&gt;
function first we’ve formatted &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; variable through an &lt;code class=&quot;highlighter-rouge&quot;&gt;stringstream&lt;/code&gt;
object, then we’ve declared a new &lt;code class=&quot;highlighter-rouge&quot;&gt;jsonResult&lt;/code&gt; variable from &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; class, and
then we’ve initialized it with &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; data structure in an intuitive manner.
This &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; data structure has a variable called &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; which is set to
formatted &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; variable. Finally we’ve converted the &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; data structure
to a &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; object and returned it.&lt;br /&gt;
In the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_handler&lt;/code&gt; function we’ve called the &lt;code class=&quot;highlighter-rouge&quot;&gt;to_json&lt;/code&gt; function and passed
the result of calculation as argument, then set the &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; variable to
returned value.&lt;br /&gt;
Finally we must send data to the client:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory.cpp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;void CalcResourceFactory::get_handler(const shared_ptr&amp;lt;Session&amp;gt; session) {
    const auto [num1, num2, operation] = get_path_parameters(session);
    auto result = calculate(num1, num2, operation);
    auto content = to_json(result);
    session-&amp;gt;close(OK, content,
        Content-Length);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve sent data through calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt; function of &lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt; object.
&lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt; function gets three arguments, &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; status code, message body and
&lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; headers. We’ve passed &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; status code, &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; JSON data as
message body and a &lt;code class=&quot;highlighter-rouge&quot;&gt;std::mulitmap&lt;/code&gt; object as &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; headers which contains a
field called &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Length&lt;/code&gt; specifying length of message body.&lt;br /&gt;
Now it turns to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;get_resource&lt;/code&gt; function:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CalcResourceFactory.cpp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;shared_ptr&amp;lt;Resource&amp;gt; CalcResourceFactory::get_resource() const {
  return _resource;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;get_resource&lt;/code&gt; function just returns &lt;code class=&quot;highlighter-rouge&quot;&gt;_resource&lt;/code&gt; object.&lt;br /&gt;
Now we must publish calculator resource through a web service. The &lt;code class=&quot;highlighter-rouge&quot;&gt;restbed&lt;/code&gt;
framework has a class called &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings&lt;/code&gt; to initialize settings of a web
service.&lt;br /&gt;
Now we’re going to implement a new class in order to create settings of
calculator web service. We start off by designing its interface, Create new
&lt;code class=&quot;highlighter-rouge&quot;&gt;include/IServiceSettingsFactory.h&lt;/code&gt; and implement this interface as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#pragma once

#include &amp;lt;memory&amp;gt;
#include &amp;lt;restbed&amp;gt;

using namespace std;
using namespace restbed;

class IServiceSettingsFactory {

public:

  virtual shared_ptr&amp;lt;Settings&amp;gt; get_settings() const = 0;

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This interface is similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;IResourceFactory&lt;/code&gt; interface. We can abstract
these interfaces more, but it’s beyond this course.&lt;br /&gt;
The &lt;code class=&quot;highlighter-rouge&quot;&gt;IServiceSettingsFactory&lt;/code&gt; interface has an abstract function called
&lt;code class=&quot;highlighter-rouge&quot;&gt;get_settings&lt;/code&gt;, every concrete class which implements this interface must
prepare and create web service settings and then deliver settings through the
&lt;code class=&quot;highlighter-rouge&quot;&gt;get_settings&lt;/code&gt; function.&lt;br /&gt;
Now it turns to creating a calculator web service settings factory class.
Create new &lt;code class=&quot;highlighter-rouge&quot;&gt;include/CalcServiceSettingsFactory.h&lt;/code&gt; header file as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#pragma once

#include &quot;IServiceSettingsFactory.h&quot;

class CalcServiceSettingsFactory : public IServiceSettingsFactory {

public:

    CalcServiceSettingsFactory();
    shared_ptr&amp;lt;Settings&amp;gt; get_settings() const final;

private:

    std::shared_ptr&amp;lt;Settings&amp;gt; _settings;

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve declared a new class called &lt;code class=&quot;highlighter-rouge&quot;&gt;CalcServiceSettingsFactory&lt;/code&gt; which implements
&lt;code class=&quot;highlighter-rouge&quot;&gt;IServiceSettingsFactory&lt;/code&gt; interface. Also we’ve declared a constructor function
and a member object called &lt;code class=&quot;highlighter-rouge&quot;&gt;_settings&lt;/code&gt;. The member object is a &lt;code class=&quot;highlighter-rouge&quot;&gt;shared_ptr&lt;/code&gt;
from &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings&lt;/code&gt; class.&lt;br /&gt;
Let’s create &lt;code class=&quot;highlighter-rouge&quot;&gt;CalcServiceSettingsFactory.cpp&lt;/code&gt; source file and implement
constructor function as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#include &quot;CalcServiceSettingsFactory.h&quot;

CalcServiceSettingsFactory::CalcServiceSettingsFactory() {
    _settings = make_shared&amp;lt;Settings&amp;gt;();
    _settings-&amp;gt;set_port(8080);
    _settings-&amp;gt;set_default_header(&quot;Connection&quot;, &quot;close&quot;);
    _settings-&amp;gt;set_default_header( &quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve created an object from &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings&lt;/code&gt; class. This object is used to specify
web service settings. We’ve set port number and two default &lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; headers
through this object. &lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt; headers is set to &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; in
order to prevent &lt;code class=&quot;highlighter-rouge&quot;&gt;CORS&lt;/code&gt; errors, for further information about this error you
can read
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS/Errors&quot;&gt;this article&lt;/a&gt;.&lt;br /&gt;
Now implement &lt;code class=&quot;highlighter-rouge&quot;&gt;get_settings&lt;/code&gt; function as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;shared_ptr&amp;lt;Settings&amp;gt; CalcServiceSettingsFactory::get_settings() const {
    return _settings;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;get_settings&lt;/code&gt; function only returns the &lt;code class=&quot;highlighter-rouge&quot;&gt;_settings&lt;/code&gt; object.&lt;br /&gt;
Now we must create the calculator web service. The &lt;code class=&quot;highlighter-rouge&quot;&gt;restbed&lt;/code&gt; framework has a
class called &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; which helps us to create web services and publish
resources. We’re going to implement a new class to implement calculator web
service through &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; class.&lt;br /&gt;
Let’s start by designing the interface. Create new &lt;code class=&quot;highlighter-rouge&quot;&gt;include/IService.h&lt;/code&gt; header
file and implement &lt;code class=&quot;highlighter-rouge&quot;&gt;IService&lt;/code&gt; interface as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#pragma once

class IService {

public:

  virtual void start() = 0;

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve declared an &lt;code class=&quot;highlighter-rouge&quot;&gt;IService&lt;/code&gt; interface. Inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;IService&lt;/code&gt; interface we’ve
declared an abstract function called &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;. Every concrete service class
which implements this interface must get resources and settings objects and
then initialize a web service, and when the &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function is called, it must
ignite the web service.&lt;br /&gt;
Let’s implement the concrete calculator service class. Create a new
&lt;code class=&quot;highlighter-rouge&quot;&gt;include\CalcService.h&lt;/code&gt; header file and implement &lt;code class=&quot;highlighter-rouge&quot;&gt;CalcService&lt;/code&gt; class as
follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#pragma once

#include &quot;IService.h&quot;

#include &quot;IResourceFactory.h&quot;
#include &quot;IServiceSettingsFactory.h&quot;

class CalcService : public IService {

public:

    CalcService(
        shared_ptr&amp;lt;IResourceFactory&amp;gt; resource_factory,
        shared_ptr&amp;lt;IServiceSettingsFactory&amp;gt; settings_factory);
    void start() final;

private:

    Service _service;
    shared_ptr&amp;lt;IServiceSettingsFactory&amp;gt; _settings_factory;

};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;‍‍The &lt;code class=&quot;highlighter-rouge&quot;&gt;CalcService&lt;/code&gt; class‍‍‍‍ implements the &lt;code class=&quot;highlighter-rouge&quot;&gt;IService&lt;/code&gt; interface. It has two member
objects, an object from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Service&lt;/code&gt; class called &lt;code class=&quot;highlighter-rouge&quot;&gt;_service&lt;/code&gt; and a
&lt;code class=&quot;highlighter-rouge&quot;&gt;shared_ptr&lt;/code&gt; object from &lt;code class=&quot;highlighter-rouge&quot;&gt;IServiceSettingsFactory&lt;/code&gt; interface called
&lt;code class=&quot;highlighter-rouge&quot;&gt;_settings_factory&lt;/code&gt;. Also it has a constructor function which gets two
interfaces, &lt;code class=&quot;highlighter-rouge&quot;&gt;IResourceFactory&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;IServiceSettingsFactory&lt;/code&gt; interfaces.&lt;br /&gt;
Now Let’s start by implementing the constructor function. Create
a &lt;code class=&quot;highlighter-rouge&quot;&gt;CalcService.cpp&lt;/code&gt; resource file and implement the constructor function as
follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#include &quot;CalcService.h&quot;

CalcService::CalcService(
        shared_ptr&amp;lt;IResourceFactory&amp;gt; resource_factory,
        shared_ptr&amp;lt;IServiceSettingsFactory&amp;gt; setting_factory) {
    _settings_factory = settings_factory;
    _service.publish(resource_factory-&amp;gt;get_resource());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve initialized the &lt;code class=&quot;highlighter-rouge&quot;&gt;_settings_factory&lt;/code&gt; member object with &lt;code class=&quot;highlighter-rouge&quot;&gt;settings_factory&lt;/code&gt;
argument. Then We’ve got the calculator resource object from the
&lt;code class=&quot;highlighter-rouge&quot;&gt;resource_factory&lt;/code&gt; object, and finally we’ve published the calculator resource
through calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt; function of the &lt;code class=&quot;highlighter-rouge&quot;&gt;_service&lt;/code&gt; object.&lt;br /&gt;
Now it turns to implementing the &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;void CalcService::start() {
    _service.start(_settings_factory-&amp;gt;get_settings());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’ve called the &lt;code class=&quot;highlighter-rouge&quot;&gt;get_settings&lt;/code&gt; function of &lt;code class=&quot;highlighter-rouge&quot;&gt;_settings_factory&lt;/code&gt; to get the
&lt;code class=&quot;highlighter-rouge&quot;&gt;Settings&lt;/code&gt; object, finally we’ve passed the returned object to the start
function.  Through calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt; function calculator web service will be
started.&lt;br /&gt;
Now it’s time to connect classes together. Create a new &lt;code class=&quot;highlighter-rouge&quot;&gt;main.cpp&lt;/code&gt; file and
implement the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;#include &quot;CalcResourceFactory.h&quot;
#include &quot;CalcServiceSettingsFactory.h&quot;
#include &quot;CalcService.h&quot;

int main(const int, const char**)
{
  auto resource_factory = make_shared&amp;lt;CalcResourceFactory&amp;gt;();
  auto settings_factory = make_shared&amp;lt;CalcServiceSettingsFactory&amp;gt;();
  CalcService service {resource_factory, settings_factory};
  service.start();
  
  return EXIT_SUCCESS;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s very simple. As you see if software is developed in a modular manner,
everything becomes simple, beautiful and self expressive.&lt;br /&gt;
Congratulations. You did it!&lt;br /&gt;
Let’s compile and build the calculator web API project.&lt;/p&gt;

&lt;h3 id=&quot;build-calculator-back-end&quot;&gt;build calculator Back-end&lt;/h3&gt;

&lt;p&gt;We’re going to build calculator back-end through &lt;code class=&quot;highlighter-rouge&quot;&gt;cmake&lt;/code&gt;. Create
&lt;code class=&quot;highlighter-rouge&quot;&gt;calculator_back-end/CMakeLists.txt&lt;/code&gt; file and copy following code into it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake_minimum_required(VERSION 3.0)

project(CalculatorAPI)

add_executable(CalculatorAPI
    main.cpp
    CalcResourceFactory.cpp
    CalcService.cpp
    CalcServiceSettingsFactory.cpp)
target_link_libraries(CalculatorAPI restbed)
target_include_directories(CalculatorAPI PUBLIC ${CMAKE_SOURCE_DIR}/include)
set_property(TARGET CalculatorAPI PROPERTY CXX_STANDARD 17)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can build project through running the following command in the
terminal:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake &lt;span class=&quot;nt&quot;&gt;-Hcalculator_back-end&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Bcalculator_back-end&lt;/span&gt;/build
cmake &lt;span class=&quot;nt&quot;&gt;--build&lt;/span&gt; calculator_back-end/build &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; Release &lt;span class=&quot;nt&quot;&gt;--target&lt;/span&gt; all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you can run calculator API through running following command in the
terminal:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;calculator_back-end/build/CalculatorAPI&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Congratulations!&lt;br /&gt;
The &lt;code class=&quot;highlighter-rouge&quot;&gt;calculator_back-end&lt;/code&gt; is completed, Now you can work with calculator.&lt;/p&gt;</content><author><name></name></author><summary type="html">Table of content</summary></entry><entry><title type="html">C++20 Coroutines, Async Generator!</title><link href="/c++20/coroutines/2020/03/22/C++20_couroutines_implementing_async_generator.html" rel="alternate" type="text/html" title="C++20 Coroutines, Async Generator!" /><published>2020-03-22T12:55:47+04:30</published><updated>2020-03-22T12:55:47+04:30</updated><id>/c++20/coroutines/2020/03/22/C++20_couroutines_implementing_async_generator</id><content type="html" xml:base="/c++20/coroutines/2020/03/22/C++20_couroutines_implementing_async_generator.html">&lt;p&gt;Async generator is very similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;generator&lt;/code&gt; and can produce a sequence of
values lazily, but ‍&lt;code class=&quot;highlighter-rouge&quot;&gt;async_generator&lt;/code&gt; is different from &lt;code class=&quot;highlighter-rouge&quot;&gt;generator&lt;/code&gt; in that
values also can be produced asynchronously.
In the &lt;code class=&quot;highlighter-rouge&quot;&gt;generator&lt;/code&gt; coroutine body, we only can use &lt;code class=&quot;highlighter-rouge&quot;&gt;co_yield&lt;/code&gt; operator, but in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;async_generator&lt;/code&gt; coroutine body, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;co_yield&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;co_await&lt;/code&gt;
operators.
Take a look at the following simple example.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async_generator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ticker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threadpool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;co_yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threadpool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ticker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tick &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the consumer task a &lt;code class=&quot;highlighter-rouge&quot;&gt;for co_await&lt;/code&gt; range_based for-loop is used to consume
values of &lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;. And also in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ticker&lt;/code&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;co_await&lt;/code&gt; operator is used to
waiting asynchronously.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;async_generator&lt;/code&gt; class has an iterator type and also &lt;code class=&quot;highlighter-rouge&quot;&gt;begin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt;
functions were implemented in order to be used in the range_based for-loop.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;async_generator&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;iterator&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Awaitable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the &lt;code class=&quot;highlighter-rouge&quot;&gt;begin&lt;/code&gt; function is called, it returns an awaitable object. This
awaitable object must be awaited to get the iterator.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;iterator&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Awaitable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;noexcept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the &lt;code class=&quot;highlighter-rouge&quot;&gt;iterator&lt;/code&gt; is incremented, it returns an awaitable object. This
awaitable object must be awaited to resume the coroutine if the coroutine is
suspended.
If the coroutine runs to completion then the &lt;code class=&quot;highlighter-rouge&quot;&gt;iterator&lt;/code&gt; will subsequently become
equal to the &lt;code class=&quot;highlighter-rouge&quot;&gt;end()&lt;/code&gt; iterator. If the coroutine completes with an unhandled
exception then that exception will be rethrown from the &lt;code class=&quot;highlighter-rouge&quot;&gt;co_await&lt;/code&gt; expression.
If you don’t know about awaitable objects, I recommend watching one of my
previous videos about implementing a generator, task class or recursive
generator. You can find these videos in my YouTube channel.
When the &lt;code class=&quot;highlighter-rouge&quot;&gt;async_generator&lt;/code&gt; object is destructed it requests cancellation of the
underlying coroutine. If the coroutine has already run to completion or is
currently suspended in a &lt;code class=&quot;highlighter-rouge&quot;&gt;co_yield&lt;/code&gt; expression then the coroutine is destroyed
immediately. Otherwise, the coroutine will continue execution until it either
runs to completion or reaches the next &lt;code class=&quot;highlighter-rouge&quot;&gt;co_yield&lt;/code&gt; expression.&lt;br /&gt;
Let’s check two interesting test cases from &lt;code class=&quot;highlighter-rouge&quot;&gt;cppcoro&lt;/code&gt;, it’s very useful, it help
us to understand how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;async_generator&lt;/code&gt; and usages.&lt;/p&gt;

&lt;h2 id=&quot;first-test-case&quot;&gt;First Test Case&lt;/h2&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &quot;doctest/doctest.h&quot;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;TEST_SUITE_BEGIN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;async_generator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;TEST_CASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;async producer with async consumer&quot;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doctest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;This test tries to cover the different state-transition code-paths&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;- consumer resuming producer and producer completing asynchronously&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;- producer resuming consumer and consumer requesting next value synchronously&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;- producer resuming consumer and consumer requesting next value asynchronously&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;TEST_SUITE_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;doctest&lt;/code&gt; framework is used to implement test cases. It’s a single-header
testing framework for unit tests and TDD. It’s very fast and feature-rich.
This test case shows a simple example of asynchronous programming by coroutines
and &lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt; class. This test case implements a simple producer-consumer scenario
by &lt;code class=&quot;highlighter-rouge&quot;&gt;async_generator&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;single_consumer_event&lt;/code&gt;.&lt;br /&gt;
Let’s see the test body.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single_consumer_event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single_consumer_event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single_consumer_event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single_consumer_event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At first four objects from the &lt;code class=&quot;highlighter-rouge&quot;&gt;single_consumer_event&lt;/code&gt; class are created to
synchronize producer and consumer. Three first objects (p1, p2 and p3) will be
used by the producer, and the last object (c1) will be used by the consumer.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produce&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async_generator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;co_yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;co_yield&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then the producer is implemented as a lambda function. The return type of lambda
function is an object from &lt;code class=&quot;highlighter-rouge&quot;&gt;async_generator&lt;/code&gt; and it causes this lambda
function to turn into a coroutine. So it can use &lt;code class=&quot;highlighter-rouge&quot;&gt;co_await&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;co_yield&lt;/code&gt;
operators in its body.&lt;br /&gt;
Producer generates values in an asynchronous manner. Every time that it
co_awaits &lt;code class=&quot;highlighter-rouge&quot;&gt;p1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;p2&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;p3&lt;/code&gt; objects, it’s suspended. And the producer will be
resumed by calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;set()&lt;/code&gt; function of event objects (&lt;code class=&quot;highlighter-rouge&quot;&gt;p1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;p2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;p3&lt;/code&gt;)
asynchronously.&lt;br /&gt;
Let’s see the consumer.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consumerFinished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;consume&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;consumerFinished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also consumer is implemented as a lambda function. The return type of lambda
function is an object from &lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt; and it causes this lambda function to turn
into a coroutine. If you don’t know about &lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt;, I recommend watching one of
my previous videos about implementing the &lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt; class. you can find this video
in my YouTube channel.&lt;br /&gt;
In the &lt;code class=&quot;highlighter-rouge&quot;&gt;consumer&lt;/code&gt;, first an object from the producer is created, then &lt;code class=&quot;highlighter-rouge&quot;&gt;begin()&lt;/code&gt;
function is called, this function returns an awaitable object. then awaitable
object is awaited, and it causes the producer to be resumed till the producer
reaches a &lt;code class=&quot;highlighter-rouge&quot;&gt;co_yield&lt;/code&gt; operator and suspended, finally &lt;code class=&quot;highlighter-rouge&quot;&gt;begin()&lt;/code&gt; function returns
an &lt;code class=&quot;highlighter-rouge&quot;&gt;iterator&lt;/code&gt; object.&lt;br /&gt;
Consumer can access to the values of generator by dereference the &lt;code class=&quot;highlighter-rouge&quot;&gt;iterator&lt;/code&gt;
object.&lt;br /&gt;
Producer is resumed by co_awaiting the &lt;code class=&quot;highlighter-rouge&quot;&gt;operator++()&lt;/code&gt; of the &lt;code class=&quot;highlighter-rouge&quot;&gt;iterator&lt;/code&gt; object.
Let’s execute the producer and consumer tasks.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unblock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumerFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumerFinished&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;co_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;when_all_ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unblock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;when_all_ready&lt;/code&gt; function is used to create a new awaitable that completes
when all of the input awaitables complete. Then returned awaitable is
passed to the &lt;code class=&quot;highlighter-rouge&quot;&gt;sync_wait&lt;/code&gt; function. The &lt;code class=&quot;highlighter-rouge&quot;&gt;sync_wait&lt;/code&gt; function is used to
synchronously wait till the specified awaitable completes. The specified
awaitable will be &lt;code class=&quot;highlighter-rouge&quot;&gt;co_await&lt;/code&gt;ed on current thread. The &lt;code class=&quot;highlighter-rouge&quot;&gt;unblock&lt;/code&gt; task is created
to set events, and resumes suspended tasks.&lt;/p&gt;

&lt;h2 id=&quot;second-test-case&quot;&gt;Second Test Case&lt;/h2&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;TEST_CASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fmap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This test case shows the &lt;code class=&quot;highlighter-rouge&quot;&gt;fmap&lt;/code&gt; function usages in conjunction with
&lt;code class=&quot;highlighter-rouge&quot;&gt;async_generator&lt;/code&gt;. Let’s see the test body.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;async_generator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iota&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async_generator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;co_yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;iota&lt;/code&gt; function is declared as a lambda function, and it’s return type is an
object from &lt;code class=&quot;highlighter-rouge&quot;&gt;async_generator&amp;lt;int&amp;gt;&lt;/code&gt; and it causes this lambda function to turn
into a coroutine. &lt;code class=&quot;highlighter-rouge&quot;&gt;iota&lt;/code&gt; is a generator that generates a sequence of values
lazily.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squares&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iota&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Firstly an object from the generator is created by calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;iota&lt;/code&gt;
function, then &lt;code class=&quot;highlighter-rouge&quot;&gt;fmap&lt;/code&gt; function is used to apply the specified lambda function to
the values of the generator. It seems very interesting with pipe notation.
Now the &lt;code class=&quot;highlighter-rouge&quot;&gt;squares&lt;/code&gt; is a new generator object that its values result from
applying the lambda function to the &lt;code class=&quot;highlighter-rouge&quot;&gt;iota&lt;/code&gt; generator.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cppcoro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squares&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;CHECK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_await&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;squares&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, a task object is created to run the &lt;code class=&quot;highlighter-rouge&quot;&gt;squares&lt;/code&gt; generator and also check
it’s values. You see the values result from applying the lambda function to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;iota&lt;/code&gt; generator.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://youtu.be/4xBbuOu2kig&quot;&gt;this video&lt;/a&gt; if you want to
learn how it work. Also you can access to the slides through this
&lt;a href=&quot;https://docs.google.com/presentation/d/1oN16fJMjkyHxOETjAGNVjzwoYRoJS5Gb8pNdNeIHG6I/edit?usp=sharing&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Async generator is very similar to generator and can produce a sequence of values lazily, but ‍async_generator is different from generator in that values also can be produced asynchronously. In the generator coroutine body, we only can use co_yield operator, but in the async_generator coroutine body, we can use co_yield and co_await operators. Take a look at the following simple example.</summary></entry></feed>